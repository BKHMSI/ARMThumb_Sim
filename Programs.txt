**************************************

// Calculates the summation of a given number

.text
swi 2
add r1,r0,#0
loop: sub r1,#1
add r0,r0,r1
cmp r1,#0
bne loop
exit: swi 1

.data
Bytes: .byte a,b,c,d
prompt: .asciiz “Enter Integer: “
Ints: .word 145,153,1716,1646,64


**************************************

// Hello World

.code
bl printHello 
swi 6

printHello: 
	ldr r0,=hello
    swi 5
    bx lr
    

.data
hello: .asciiz “Hello World”

**************************************

.code
ldr r1,=int
ldr r0,[r1,#0]
swi 1

.data
int: .word 0xFFD

**************************************

mov r0,#5
mov r1,r0
add r1,#10
push {r0-r1}
pop {r2-r3}
mov r0,r2
swi 1
mov r0,r3
swi 1

**************************************

.code
mov r0,#10
cmp r0,#5
bgt exit
swi 1
swi 6
exit: swi 6

**************************************


/******** Recursive Factorial **********\

.code
swi 2
bl Factorial
mov r0,r1
swi 1
swi 6

Factorial:
    cmp r0,#1
    bgt Fact_General
    mov r1,#1
    bx lr
Fact_General:
    add sp,#-8
    mov r2,r13
    str r0,[r2,#4]
    mov r3,r14
    str r3,[r2,#0]
    sub r0,#1
    bl Factorial
    mov r2,r13 ; Put Stack Pointer into R2
    ldr r0,[r2,#4] ; Load R0 from Memory
    mul r1,r0
    ldr r2,[r2,#0] ; Load LR from Memory
    mov r14,r2 ; Put it into LR Reg
    add sp,#8  ; Add 8 to Stack Pointer
    bx lr 

**************************************

/******** Recursive Fibonacci **********\

.code

swi 2
BL Fib 
mov r0,r1
swi 1
swi 6
	
Fib:
    cmp r0, #1
    bgt Fib_General
    mov r1, r0
    bx lr
Fib_General:
    add sp,#-12
    mov r4,r14 ; Put LR into R4
    str r4,[SP,#0] ; Store Return Address
    str r0,[SP,#4] ; Store R0
    sub r0, #1 ; R0 = R0 -1
    BL Fib ; Brancha and Link to Fib
    str r1,[SP,#8] ; Store Return Value
    ldr r0,[SP,#4] ; Get Argument
    sub r0,#2 ; R0 = R0 - 2
    BL Fib
    ldr r2, [SP,#8]
    add r1,r1,r2 ; R1 = R1 + R2
    ldr r4, [SP,#0]
    mov r14,r4 ; PUT Return Value into LR 
    add SP,#12
    bx lr

**************************************


/****Comments***\
I removed the -2 from the BL in simulator.js when jumping forward
I removed -1 in the assembler.js in the branch instructions 
I add ppc == $scope.pc condition in step